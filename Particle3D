import sys
import numpy as np
class Particle3D(object):

    # Initialise a Particle3D instance
    def __init__(self, pos, vel, mass, label):
        self.position = pos
        self.velocity = vel
        self.mass = mass
        self.label = label

    # Formatted output as String
    def __str__(self):
        return "label = " + str(self.label) + "x = " + str(self.position[0]) + "y = " + str(self.position[1]) + "z = " + str(self.position[2])

    # Time integration methods. First-order velocity update
    def leapVelocity(self, dt, force):
        self.velocity = self.velocity + dt*(force/self.mass)

    # Second-order position update
    def leapPos(self, dt, force):
        self.position = self.position + dt*self.velocity + 0.5*dt**2*force/self.mass
    
    #Calculates Kinetic Energy of Particle
    def KinEnergy(self):
        v = np.linalg.norm(self.velocity)
        KinEnergy = 0.5*self.mass*(v**2)
        return KinEnergy


    # Static Method returning relative vector separation of two particles
    @staticmethod
    def separation(p1,p2, boxLen):
        separation = np.array([0.0,0.0,0.0])
        for i in range(3):
            pos1 = p1.position[i]
            distance = p1.position[i] - p2.position[i]
            if distance>(boxLen/2):
                pos1 = (pos1 % (boxLen))-boxLen
                separation[i] = pos1-p2.position[i]
            elif distance<-(boxLen/2):
                pos1 = (pos1 % (boxLen)) + (boxLen)
                separation[i] = pos1-p2.position[i]
            else:
                separation[i] = distance
        return separation
    
    # Static Method that calculates the Mean Squared Displacement of all the particles in the box
    @staticmethod
    def MSDcalculator(particles, dt, maxTime):
        t=0
        SDTemp = []
        SDContain = []
        for i in range (len(particles)):
            time_last_saved= 0
            T = dt*5
            while t < maxTime:
                if t>time_last_saved + T:
                    time_last_saved = t
                    SD = np.linalg.norm(particles[i].position)
                    SDTemp.append(SD)
                t = t+dt
            SDContain.append(SDTemp)
            SDTemp = []
            t = 0
        a = np.array(SDContain)
        a.sum(axis=0)
        print(a)
        
    def PotEnergy(r):
        PotEnergy = (2/(r**12))-(2/(r**6))
        return PotEnergy

    

    
