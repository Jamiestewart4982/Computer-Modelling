import sys
import numpy as np
class Particle3D(object):

    # Initialise a Particle3D instance
    def __init__(self, pos, vel, mass, label):
        self.position = pos
        self.velocity = vel
        self.mass = mass
	    self.label = label

    # Formatted output as String
    def __str__(self):
        return "label = " + str(self.label) + "x = " + str(self.position[0]) + "y = " + str(self.position[1]) + "z = " + str(self.position[2])

    # Time integration methods. First-order velocity update
    def leapVelocity(self, dt, force):
        self.velocity = self.velocity + dt*(force/self.mass)

    # Second-order position update
    def leapPos(self, dt, force):
        self.position = self.position + dt*self.velocity + 0.5*dt**2*force/self.mass

    # Static Method returning relative vector separation of two particles
    @staticmethod
    def separation(p1,p2):
        separation = np.array[0,0,0]
        for i in range(2):
            distance = p1.position[i] - p2.position[i]
            if distance>5.0:
                pos1 = p1.position[i]
                pos1 = pos1 - 10.0
                separation[i] = p2.position[i]-pos1
            elif distance<5.0:
                pos1 = p1.position[i]
                pos1 = pos1 + 10.0
                separation[i] = p2.position[i]-pos1
            else:
                separation[i] = p1.position[i]-p2.position[i]
        return separation
    
